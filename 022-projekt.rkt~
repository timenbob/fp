#lang racket
(provide false true int .. empty exception
         trigger triggered handle
         if-then-else
         ?int ?bool ?.. ?seq ?empty ?exception
         add mul ?leq ?= head tail ~ ?all ?any
         vars valof fun proc closure call
         greater rev binary filtering folding mapping
         fri)

;; FR Interpretor

;pomozne

(define (every-true? seq)
  (andmap (λ (x) (equal? x (true))) seq))

(define (any-true? seq)
  (ormap (λ (x) (equal? x (true))) seq))

;; Helper function to check if a sequence ends with empty
(define (ends-with-empty? seq)
  (cond
    [(empty? seq) #t] ;; The sequence is empty
    [(..? seq) (ends-with-empty? (sequence-tail seq))] ;; Check the tail recursively
    [else #f])) ;; Not a sequence that ends with empty


;; def stvari
(struct true ()#:transparent)
(struct false ()#:transparent)
(struct int (value)#:transparent)
(struct .. (head tail)#:transparent)
(struct empty ()#:transparent)
(struct exception (message)#:transparent)
(struct triggered (exception)#:transparent)
(struct trigger (value)#:transparent)
(struct handle (e1 e2 e3)#:transparent)
(struct if-then-else (condition e1 e2) #:transparent)
(struct add (e1 e2) #:transparent )
(struct mul (e1 e2) #:transparent )

(struct ?int (e1)#:transparent)
(struct ?bool (e1)#:transparent)
(struct ?.. (e1)#:transparent)
(struct ?seq (e1)#:transparent)
(struct ?empty (e1)#:transparent)
(struct ?exception (e1)#:transparent)
(struct ?leq (e1 e2)#:transparent)
(struct ?= (e1 e2)#:transparent)

(struct head (e1)#:transparent)
(struct tail (e1)#:transparent)

(struct ~ (e1)#:transparent)
(struct ?all (e1)#:transparent)
(struct ?any (e1)#:transparent)

(struct vars (s e1 e2)#:transparent)
(struct valof (s)#:transparent)

(struct fun (name args body)#:transparent)        ;; Funkcija
(struct proc (name body)#:transparent)            ;; Procedura
(struct closure (env fun)#:transparent)           ;; Funkcijska ovojnica
(struct call (e1 e2)#:transparent)

;; FR Interpretor
(define (fri expression environment)
  (match expression
    ;; Handle true and false
    [(true) (true)] ; Ta primer je potreben za obravnavo logičnih konstant `true`, ki so osnovni gradniki jezika.
    [(false) (false)] ; Ta primer obravnava logično konstantno `false`.

    ;; Handle integers
    [(int n) (int n)] ; Obravnava celih števil, ki se ne spreminjajo.

    ;; Handle sequences
    [(.. e1 e2) (.. (fri e1 environment) (fri e2 environment))] ; Obdeluje zaporedja z glavo in repom.
    [(empty) (empty)] ; Obravnava prazno zaporedje kot posebno strukturo.

    ;; Handle exceptions
    [(exception exn) (exception exn)] ; Ohrani izjeme, ne da bi jih spreminjal.

    ;; Trigger exceptions
    [(trigger e) ; Zagotovimo, da ima vzorec argument
     (let ([evaluated (fri e environment)])
       (if (triggered? evaluated)
           evaluated
           (triggered (exception "trigger: wrong argument type"))))]


    ;; Handle exceptions
    [(handle e1 e2 e3)
     (let ([evaluated (fri e1 environment)])
       (cond
         [(triggered? evaluated) evaluated];izjema je sprozena
         [(not (exception? evaluated)); ni exception
          (triggered (exception "handle: wrong argument type"))]
         [(equal? evaluated (fri e2 environment)) (fri e3 environment)]
         [else (fri e2 environment)]))]

    ;; If-then-else
    [(if-then-else condition e1 e2)
     (let ([cond (fri condition environment)])
       (if (equal? cond (false))
           (fri e2 environment)
           (fri e1 environment)))]

    ;; Type checking
    [(?int e) (if (int? (fri e environment)) (true) (false))]
    [(?bool e) (if (or (true? (fri e environment)) (false? (fri e environment)))
                   (true)
                   (false))]
    
    [(?.. e)
     (let ([seq (fri e environment)])
       (cond
         [(sequence? seq) (if (ends-with-empty? seq) (true) (false))]
         [else (triggered (exception "?..: wrong argument type"))]))]

    
    [(?seq e) (if (sequence? (fri e environment)) (true) (false))]
    [(?empty e) (if (equal? (fri e environment) (empty)) (true) (false))]
    [(?exception e) (if (exception? (fri e environment)) (true) (false))]

    ;; Addition
    [(add e1 e2)
     (let ([val1 (fri e1 environment)]
           [val2 (fri e2 environment)])
       (cond
         [(and (true? val1) (true? val2)) (true)]
         [(and (int? val1) (int? val2)) (int (+ (int-value val1) (int-value val2)))]
         [(and (sequence? val1) (sequence? val2)) (.. val1 val2)]
         [else (triggered (exception "add: wrong argument type"))]))]

    ;; Multiplication
    [(mul e1 e2)
     (let ([val1 (fri e1 environment)]
           [val2 (fri e2 environment)])
       (cond
         [(and (true? val1) (true? val2)) (true)]
         [(and (int? val1) (int? val2)) (int (* (int-value val1) (int-value val2)))]
         [else (triggered (exception "mul: wrong argument type"))]))]

    ;; Comparison
    [(?leq e1 e2)
     (let ([val1 (fri e1 environment)]
           [val2 (fri e2 environment)])
       (cond
         [(and (true? val1) (true? val2)) (true)]
         [(and (int? val1) (int? val2)) (if (<= (int-value val1) (int-value val2)) (true) (false))]
         [(and (sequence? val1) (sequence? val2))
          (if (<= (length val1) (length val2)) (true) (false))]
         [else (triggered (exception "?leq: wrong argument type"))]))]

    ;; Equality
    [(?= e1 e2) (if (equal? (fri e1 environment) (fri e2 environment)) (true) (false))]

    ;; Extraction
    [(head e)
     (let ([seq (fri e environment)])
       (cond
         [(sequence? seq) (head seq)]
         [(equal? seq (empty)) (triggered (exception "head: empty sequence"))]
         [else (triggered (exception "head: wrong argument type"))]))]
    [(tail e)
     (let ([seq (fri e environment)])
       (cond
         [(sequence? seq) (tail seq)]
         [(equal? seq (empty)) (triggered (exception "tail: empty sequence"))]
         [else (triggered (exception "tail: wrong argument type"))]))]

    ;; Negation
    [(~ e)
     (let ([val (fri e environment)])
       (cond
         [(true? val) (false)]
         [(false? val) (true)]
         [(int? val) (int (- (int-value val)))]
         [else (triggered (exception "~: wrong argument type"))]))]

    
    ;; ?all and ?any
    [(?all e)
     (let ([seq (fri e environment)])
       (cond
         [(sequence? seq) (if (every-true? seq) (true) (false))]
         [else (triggered (exception "?all: wrong argument type"))]))]
    
    [(?any e)
     (let ([seq (fri e environment)])
       (cond
         [(sequence? seq) (if (any-true? seq) (true) (false))]
         [else (triggered (exception "?any: wrong argument type"))]))]

    
    ;; Local variables (vars)
    [(vars s e1 e2)
     (let ([new-env (if (list? s)
                        (append (map cons s (map (λ (x) (fri x environment)) e1)) environment)
                        (cons (cons s (fri e1 environment)) environment))])
       (fri e2 new-env))]

    ;; Variable value (valof)
    [(valof s)
     (let ([value (assoc s environment)])
       (if value
           (if (triggered? (cdr value))
               (cdr value)
               (cdr value))
           (triggered (exception "valof: undefined variable"))))]




    
    
    ;; Default case for unrecognized constructs
    [_ (triggered (exception "Unrecognized construct"))]))



;;makri

(define (greater e1 e2)
  (if (?leq e1 e2)
      (false)
      (true)))


(define (rev e)
  (let ([seq (fri e)])
    (if (?seq seq)
        (seq);;TUKI GA MORES OBRNIT
        (triggered (exception "rev: wrong argument type")))))

(define (binary e1)
  (let ([num (fri e1)])
    (if (and (integer? num) (>= num 0))
        (let loop ([n num] [bits '()])
          (if (= n 0)
              ( bits);;TUKI GA MORES OBRNIT
              (loop (quotient n 2) (cons (remainder n 2) bits))))
        (triggered (exception "binary: wrong argument type")))))

(define (mapping f seq)
  (let ([fun (fri f)]
        [lst (fri seq)])
    (if (?seq lst)
        (sequence-map (lambda (x) (call fun (list x))) lst)
        (triggered (exception "mapping: wrong argument type")))))

(define (filtering f seq)
  (let ([fun (fri f )]
        [lst (fri seq )])
    (if  (?seq lst)
        (sequence-filter (lambda (x) (valof (call fun (list x)))) lst)
        (triggered (exception "filtering: wrong argument type")))))

(define (folding f init seq)
  (let ([fun (fri f)]
        [init-val (fri init)]
        [lst (fri seq )])
    (if  (?seq lst)
        (foldl (lambda (x acc) (valof (call fun (list x acc)))) init-val lst)
        (triggered (exception "folding: wrong argument type")))))

